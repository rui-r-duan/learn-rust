* rustup
  rustup update
  rustup doc --book
* cargo
  cargo run
  cargo build --verbose
  cargo update
  RUST_BACKTRACE=1 cargo run --verbose
  RUST_BACKTRACE=full cargo run
* rustc
  rustc --explain E0308
* THOUGHTS
** Don't abuse variable shadowing.
#+begin_quote
  This feature is often used in situations in which you want to convert a value
  from one type to another type.  Shadowing lets us reuse the 'guess' variable
  name rahter than forcing us to create two unique variables, such as
  'guess_str' and 'guess' for example.
#+end_quote
  However, it makes people hard to find its definition.  Let's see if tools can
  help find the accurate definition in one go.
** Don't use the "return value" of an operation.
#+begin_src rust
  let mut y = 5;
  let x = (y = 6);		// x has the value '()', not '6'
#+end_src
  This feature is to make sure that every expression to have a value, including
  the assignment operation/expression.

  The fundamental design fault is that they use an empty tuple to denote a void
  type.

  Rust allows you to propogate a meaningless return type of an statement like
  expression.  If this kind of error is not caught and is propogated to other
  places, it will be difficult to find the root cause, and this issue may cause
  runtime errors or type checking errors.

  The same design fault lives in JavaScript and PHP where the meaningless
  "undefined" is spreaded over the whole program.
** A good example of the use of enum type (union type) to enfoce exception handling
#+begin_verse
   Compiling guessing-game v0.1.0 (/Users/rduan/mygitlab/study-rust/guessing-game)
error[E0308]: mismatched types
  --> src/main.rs:20:22
   |
20 |     let guess: u32 = guess.trim().parse();//.expect("Please type a number!");
   |                ---   ^^^^^^^^^^^^^^^^^^^^ expected `u32`, found enum `Result`
   |                |
   |                expected due to this
   |
   = note: expected type `u32`
              found enum `Result<_, _>`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
error: could not compile `guessing-game`

To learn more, run the command again with --verbose.
#+end_verse
* print type of a variable
#+begin_src rust
  fn print_type_of<T>(_: &T) {
      println!("{}", std::any::type_name::<T>())
  }
#+end_src
* reasons to adopt Rust in our projects
  - advanced tool to aid us to design and code
    - type safety
      - no the billion-dollar bug (null bug)
      - safer error handling than Go and other nullable language, compiler can
        aid us and protect us
    - easy concurrency and reasoning (human understanding) by declarative
      computing
      - immutable variable by default
      - support closure which facilitates functional programming paradigm
    - modern built-in types and types from the standard library (using old
      languages, we have to tweak the old types for good practices nowadays)
  - prototyping and enough optimization in one go, compared to quick
    prototyping and hard and long optimization in Python
  - save cloud cost by
    - extremely high runtime speed (can serve more requests per second)
      comparable to C/C++
    - small memory footprints
    - small container images
  - modern tooling
    - very helpful compiler
    - specialized build system included (i.e. cargo) vs. C++'s GNU Make
    - documentation tools (e.g. rustup doc)
  - expressive and concise
    - less boilerplate code than Java and C++
    - more expressive and elegant than Go
      - support Generic
	- consider a use case where we need to sort entries of a user defined
          type, Go's implementation is tedious
	- In Go, people tend to abuse interface{} to hold unknown type of data,
          which bypasses the type safety checking
      - better trade-off than Go
        - Go hard-codes hash table into the language, whereas Rust uses library
  - modern package and module management
  - good community
    - strong language developers
    - friendly and supportive
    - backing by large companies (Mozilla, Microsoft, Amazon, Google, etc.)
  - better FFI than Go
* cons compared to Python
  - no REPL
  - harder to learn
  - burden to manipulate the object memory ownership
  - less mature in the ecosystem
  - a little less coding speed
* cons compared to Swift
  - no REPL
  - syntax being more elaborate
* cons compared to C++
  - less mature in the ecosystem
* cons compared to Java 8
  - less mature in the ecosystem
* cons compared to Go
  - less mature in the ecosystem
  - harder to learn
* cons compared to Common Lisp
  - no REPL
  - no meta programming control in the compile time and load time
  - not "data as code" and "code as data"
* compare with Oz
** pros
   - much better string type
   - better
** cons
   - no tail call optimization which leads to a crippled support for recursion,
     which leads to less descriptive programming paradigm.
   - no difference list
   - conceptually more complicated types for pattern matching.  In Oz, Record
     type suffices.
   - quirks due to the expression-based design
     I like Oz's design better: procedure and functions are different types.
     e.g.
     - operations return an empty tuple
     - placing a semicolon turns an expression to a statement
* compared to Swift
https://dev.to/rhymu8354/swift-vs-rust-an-overview-of-swift-from-a-rusty-perspective-18c7
* It is a design error to use an empty tuple to denote the Void type
  I like the Oz's design: an operation does not return anything.
